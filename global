#!/usr/bin/perl
use AppMercado;

#INFO: XXX

logm("DBG",9,"Comienzo de reporte",);

my $mem={};
my %global;

dbFindFold('T="deptos" AND TIPO="CARACTERISTICAS"',{},[],\&loadMem);

#logm("LOOP",9,"DATA: #1",\%mem);
out("Cantidad de edificios:", $mem{'GLOBAL'}->{'CANTIDAD'},"<br /><a href='/'>Listado de edificios en la base</a>");
out("<br />Plantas por edificio promedio:");
outf("%.2f",$mem{'GLOBAL'}->{'PLANTAS'}/$mem{'GLOBAL'}->{'CANTIDAD'});
out("<br />Unidades por edificio promedio:");
outf("%.2f",($mem{'GLOBAL'}->{'UF'}/$mem{'GLOBAL'}->{'CANTIDAD'}));
out("<p><table>");
out("<tr>Amenities en los edificios</tr>");

my $d= $mem{'GLOBAL'}->{'AMENITIES'}; #D: hash con los datos
my @ks= keys(%$d); #D: lista con las claves
my @ksXcantidad= sort({ ($d->{$b} <=> $d->{$a}) || ($a cmp $b) } @ks); #D: claves, mayor valor primero, alfabetico si son iguales

foreach my $k (@ksXcantidad) { my $v= $d->{$k};
	my $kp= substr($k,1); #A: si el asterisco
	out("<tr><td>$kp</td><td class=\"num2d\">");
	outf("%.2f",100.0*$v/$mem{'GLOBAL'}->{'CANTIDAD'});
	out('%</td></tr>'); 
}


out("</table>");

open(IN,"<template.html"); $TPL= join("",<IN>); close(IN);
$html= $TPL; $html=~ s/\<\%=\s*OUT\s*\%\>/$OUT/;
print $html;

sub loadMem {
        my ($dr)= @_;
	my %amenities;
	my %temp;
	my %d=%{$dr->{'DEPTOS'}}; 
	$global{'CANTIDAD'}++;
	$global{'PLANTAS'}=$global{'PLANTAS'}+$d{'PLANTAS'};	
	$global{'UF'}=$global{'UF'}+$d{'UNIDADES_FUNCIONALES'};	
	#A:Tengo a $d que es un hash del depto
        my %args= (split(/[\=\|]/,$d{'AMENITIES'}));
        while((my $key, my $value) = each(%args)) {
        	if($value eq 'SI'){
                	$amenities{$key}= $value; 
                	$global{'AMENITIES'}->{$key}++; 
		}
	}
	#A: Saque los Amenities que el edificio no tiene, sume a las estadisticas globales	
	$temp{'AMENITIES'}= join('',keys (%amenities));
	$mem{$d{'NOMBRE'}}->{'AMENITIES'}=$temp{'AMENITIES'};
	$mem{'GLOBAL'}=\%global;
	#logm("LOOP",9,"DATA: #1",\%mem);
}

#DFTL: sub out { print join("", @_); }
#DFLT: sub outf { printf(@_); }

sub out { $OUT.= join("", @_); }
sub outf { my ($fmt, @args)= @_; $OUT.= sprintf($fmt,@args); }
